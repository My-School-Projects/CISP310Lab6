Microsoft (R) Macro Assembler Version 11.00.61030.0	    09/29/16 18:57:18
main.asm						     Page 1 - 1


				.586
				.MODEL FLAT	; only 32 bit addresses, no segment:offset

				INCLUDE io.h   ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096	   ; allocate 4096 bytes for the stack

 00000000			.DATA

					; The purpose of this program is to find the weighted average of 4 grades,
					; each with an independent weight.

					; We will be using DWORDS, because the problem spec said to.
					; We will treat all values as unsigned integers, because this problem does not involve
					; any negative numbers.
					
 00000000 00000000			grade1			DWORD	0
 00000004 00000000			grade2			DWORD	0
 00000008 00000000			grade3			DWORD	0
 0000000C 00000000			grade4			DWORD	0
					
 00000010 00000000			weight1			DWORD	0
 00000014 00000000			weight2			DWORD	0
 00000018 00000000			weight3			DWORD	0
 0000001C 00000000			weight4			DWORD	0
					
 00000020 00000000			weightedGrade1	DWORD	0	; = grade1 * weight1
 00000024 00000000			weightedGrade2	DWORD	0	; = grade2 * weight2
 00000028 00000000			weightedGrade3	DWORD	0	; = grade3 * weight3
 0000002C 00000000			weightedGrade4	DWORD	0	; = grade4 * weight4

 00000030 00000000			weightedSum		DWORD	0	; = weightedGrade1 + weightedGrade2 + weightedGrade3 + weightedGrade4

 00000034 00000000			sumOfWeights	DWORD	0	; = weight1 + weight2 = weight3 + weight4

					; FINAL RESULT
 00000038 00000000			weightedAverage	DWORD	0	; = weightedSum / sumOfWeights


					; The input macro expects a C-string (null terminated string) to display as a prompt.

					; We need 8 prompts, 4 for grades and 4 for weights, and the prompts are almost exactly
					; the same for each, except that each ends with a number that will increment with each use.
					; Instead of duplicating the same prompt 4 times in memory, we will use one prompt and change
					; the number before each use.

					; The actual prompts will look like:
					; "Grade 1:"
					; or
					; "Weight 3:"
					; depending on the iteration.

 0000003C 47 72 61 64 65		gradePrompt		BYTE	"Grade "		; Stays constant
	   20
 00000042 58				gradeNumber		BYTE	"X"				; "X" will be replaced with a ASCII coded digit at runtime
 00000043  20 5B 30 2D 31						BYTE	" [0-100]:", 0	; Stays constant - null terminated
	   30 30 5D 3A 00

 0000004D 57 65 69 67 68		weightPrompt	BYTE	"Weight "		; Stays constant
	   74 20
 00000054 58				weightNumber	BYTE	"X"				; "X" will be replaced with a ASCII coded digit at runtime
 00000055  20 5B 30 2D 31						BYTE	" [0-100]:", 0	; Stays constant - null terminated
	   30 30 5D 3A 00

					; The input macro needs a C-string to store the data in.
					; We're using a 4 character string because our valid input range is 0 to 100,
					; and the largest valid input will be "100", and we need four bytes
					; to store "100" as a C-string (3 ASCII digits + Null terminator)

 0000005F  00000004 [			inputStr		BYTE	4	DUP	(0)
	    00
	   ]

					; The output macro needs a C-string (null-terminated string) to display as a label,
					; and a C-string to display as a message.

					; outputValue will be replaced at runtime with an 11 character string which will hold the decimal
					; value of weightedAverage

 00000063 57 65 69 67 68		outputLabel		BYTE	"Weighted Average:", 0	; Label to be displayed upon output
	   74 65 64 20 41
	   76 65 72 61 67
	   65 3A 00
 00000075  0000000B [			outputValue		BYTE	11	DUP	("X")			; Space for result of dtoa (11 ASCII coded bytes)
	    58
	   ]
 00000080  00								BYTE	0						; Null string terminator

 00000000			.CODE
 00000000			_MainProc PROC
					
					; Get grade1 and weight1

 00000000  C6 05 00000042 R		mov		gradeNumber,		"1"			; Set gradePrompt to "Grade 1:"
	   31
 00000007  C6 05 00000054 R		mov		weightNumber,		"1"			; Set weightPrompt to "Weight 1:"
	   31

					; We pass 4 to the input macro, which specifies that we want to copy a maximum of 4 bytes into memory.
					; 3 of those bytes will be ASCII coded digits (0-100), and the last will be a Null string terminator.

					input	gradePrompt,		inputStr,	4	; Display prompt, inputStr := user input (as string)
					atod	inputStr						; EAX := user input (as integer)
 0000003B  A3 00000000 R		mov		grade1,				eax			; grade1 := EAX

					input	weightPrompt,		inputStr, 4
					atod	inputStr
 0000006D  A3 00000010 R		mov		weight1,			eax			; weight1 := user input (as integer)

					; Get grade2 and weight2 (see grade1, weight1 for comments)

 00000072  C6 05 00000042 R		mov		gradeNumber,		"2"			; Set gradePrompt to "Grade 2:"
	   32
 00000079  C6 05 00000054 R		mov		weightNumber,		"2"			; Set weightPrompt to "Weight 2:"
	   32
														
					input	gradePrompt,		inputStr,	4
					atod	inputStr
 000000AD  A3 00000004 R		mov		grade2,				eax

					input	weightPrompt,		inputStr, 4
					atod	inputStr
 000000DF  A3 00000014 R		mov		weight2,			eax

					; Get grade3 and weight3 (see grade1, weight1 for comments)

 000000E4  C6 05 00000042 R		mov		gradeNumber,		"3"
	   33
 000000EB  C6 05 00000054 R		mov		weightNumber,		"3"
	   33

					input	gradePrompt,		inputStr,	4
					atod	inputStr
 0000011F  A3 00000008 R		mov		grade3,				eax

					input	weightPrompt,		inputStr, 4
					atod	inputStr
 00000151  A3 00000018 R		mov		weight3,			eax
					
					; Get grade4 and weight4 (see grade1, weight1 for comments)

 00000156  C6 05 00000042 R		mov		gradeNumber,		"4"
	   34
 0000015D  C6 05 00000054 R		mov		weightNumber,		"4"
	   34

					input	gradePrompt,		inputStr,	4
					atod	inputStr
 00000191  A3 0000000C R		mov		grade4,				eax

					input	weightPrompt,		inputStr,	4
					atod	inputStr
 000001C3  A3 0000001C R		mov		weight4,			eax

					; Do the math!

 000001C8  A1 00000000 R		mov		eax,				grade1
 000001CD  F7 25 00000010 R		mul		weight1
 000001D3  A3 00000020 R		mov		weightedGrade1,		eax				; weightedGrade1 := grade1 * weight1
																; weightedGrade1 := 43d * 40d (= 1720d)
																; OF = CF = 0 (no significant bits in EDX)

 000001D8  A1 00000004 R		mov		eax,				grade2
 000001DD  F7 25 00000014 R		mul		weight2
 000001E3  A3 00000024 R		mov		weightedGrade2,	 eax				; weightedGrade2 := grade2 * weight2
																; weightedGrade2 := 76d * 20d (= 1520d)
																; OF = CF = 0 (no significant bits in EDX)

 000001E8  A1 00000008 R		mov		eax,				grade3
 000001ED  F7 25 00000018 R		mul		weight3
 000001F3  A3 00000028 R		mov		weightedGrade3,		eax				; weightedGrade3 := grade3 * weight3
																; weightedGrade3 := 87d * 30d (= 2610d)
																; OF = CF = 0 (no significant bits in EDX)

 000001F8  A1 0000000C R		mov		eax,				grade4
 000001FD  F7 25 0000001C R		mul		weight4
 00000203  A3 0000002C R		mov		weightedGrade4,		eax				; weightedGrade4 := grade4 * weight4
																; weightedGrade4 := 82d * 40d (= 3280d)
																; OF = CF = 0 (no significant bits in EDX)

 00000208  A1 00000020 R		mov		eax,				weightedGrade1	; EAX := weightedGrade1
																; EAX := 1720d
 0000020D  03 05 00000024 R		add		eax,				weightedGrade2	; EAX := weightedGrade1 + weightedGrade2
																; EAX := 3240d (CF = 0 : sum fits in EAX)
 00000213  03 05 00000028 R		add		eax,				weightedGrade3	; EAX := weightedGrade1 + weightedGrade2 + weightedGrade3
																; EAX := 5850d (CF = 0 : sum fits in EAX)
 00000219  03 05 0000002C R		add		eax,				weightedGrade4	; EAX := weightedGrade1 + weightedGrade2 + weightedGrade3 + weightedGrade4
																; EAX := 9130d (CF = 0 : sum fits in EAX)
 0000021F  A3 00000030 R		mov		weightedSum,		eax				; weightedSum := EAX
																; weightedSum := 9130d

 00000224  A1 00000010 R		mov		eax,				weight1			; EAX := weight1
																; EAX := 40d
 00000229  03 05 00000014 R		add		eax,				weight2			; EAX := weight1 + weight2
																; EAX := 40d + 20d (= 60d) (CF = 0 : sum fits in EAX)
 0000022F  03 05 00000018 R		add		eax,				weight3			; EAX := weight1 + weight2 + weight3
																; EAX := 40d + 20d + 30d (= 90d) (CF = 0 : sum fits in EAX)
 00000235  03 05 0000001C R		add		eax,				weight4			; EAX := weight1 + weight2 + weight3 + weight4
																; EAX := 40d + 20d + 30d + 40d (= 130d) (CF = 0 : sum fits in EAX)
 0000023B  A3 00000034 R		mov		sumOfWeights,		eax				; sumOfWeights := EAX
																; sumOfWeights := 130d

					; Division by a DWORD requires the dividend to be stored in EDX:EAX
 00000240  BA 00000000			mov		edx,				0				; EDX := 0 (our dividend is only 32 bits - only the lower order bits are used)
 00000245  A1 00000030 R		mov		eax,				weightedSum		; EAX := weightedSum
																; EAX := 9130d
 0000024A  F7 35 00000034 R		div		sumOfWeights						; EAX := weightedSum / sumOfWeights
																; EAX := 9130d / 130d (= 70d)
 00000250  A3 00000038 R		mov		weightedAverage,	eax				; weightedAverage := EAX
																; weightedAverage := 70d

					dtoa	outputValue,		eax				; Convert weightedAverage (70d) into a string ("70")
					output	outputLabel,		outputValue		; Display the final result to the user

 00000286  B8 00000000			mov		eax,				0				; exit with return code 0
					
 0000028B  C3				ret
 0000028C			_MainProc ENDP

				END   ; end of source code
Microsoft (R) Macro Assembler Version 11.00.61030.0	    09/29/16 18:57:18
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000081 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000028C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000028C Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
grade1 . . . . . . . . . . . . .	DWord	 00000000 _DATA	
grade2 . . . . . . . . . . . . .	DWord	 00000004 _DATA	
grade3 . . . . . . . . . . . . .	DWord	 00000008 _DATA	
grade4 . . . . . . . . . . . . .	DWord	 0000000C _DATA	
gradeNumber  . . . . . . . . . .	Byte	 00000042 _DATA	
gradePrompt  . . . . . . . . . .	Byte	 0000003C _DATA	
inputStr . . . . . . . . . . . .	Byte	 0000005F _DATA	
outputLabel  . . . . . . . . . .	Byte	 00000063 _DATA	
outputValue  . . . . . . . . . .	Byte	 00000075 _DATA	
sumOfWeights . . . . . . . . . .	DWord	 00000034 _DATA	
weight1  . . . . . . . . . . . .	DWord	 00000010 _DATA	
weight2  . . . . . . . . . . . .	DWord	 00000014 _DATA	
weight3  . . . . . . . . . . . .	DWord	 00000018 _DATA	
weight4  . . . . . . . . . . . .	DWord	 0000001C _DATA	
weightNumber . . . . . . . . . .	Byte	 00000054 _DATA	
weightPrompt . . . . . . . . . .	Byte	 0000004D _DATA	
weightedAverage  . . . . . . . .	DWord	 00000038 _DATA	
weightedGrade1 . . . . . . . . .	DWord	 00000020 _DATA	
weightedGrade2 . . . . . . . . .	DWord	 00000024 _DATA	
weightedGrade3 . . . . . . . . .	DWord	 00000028 _DATA	
weightedGrade4 . . . . . . . . .	DWord	 0000002C _DATA	
weightedSum  . . . . . . . . . .	DWord	 00000030 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
